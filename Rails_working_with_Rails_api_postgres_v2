// STEP 0
// In your Cloud9 dashboard, click "Create a new workspace"
// Enter all of the required information
// Select the "Blank" template
// Click "Create Workspace" and wait for your workspace to load up

// STEP 1
// Install Node.js
$ sudo apt-get update
$ sudo apt-get install nodejs

// STEP 2
// Install Rails
$ gem install rails -v '5.0'

// STEP 3
// Make a project
$ rails new /home/ubuntu/workspace --api --database=postgresql
// If it asks a question for overwrite, then say 'y'

// STEP 4
-------------------------------------------------------
// In the file "Gemfile"
-------------------------------------------------------
...
gem 'rails', '~> 5.0.1'
gem 'pg', '~> 0.18'
gem 'puma', '~> 3.0'
gem 'active_model_serializers', '~> 0.10.0'
gem 'rack-cors'
 
group :development, :test do
  gem 'pry-rails'
  gem 'faker'
end
 
group :development do
  gem 'bullet'
  gem 'listen', '~> 3.0.5'
  gem 'spring'
  gem 'spring-watcher-listen', '~> 2.0.0'
end
gem "will_paginate", "~> 3.0.4"
...
-------------------------------------------------------
$ bundle install

// STEP 5
$ rails generate model author first_name last_name
$ rails g model book title author:references
$ rails g model user first_name last_name email
$ rails g model book_copy book:references isbn published:date format:integer user:references
-------------------------------------------------------
// In the file "db/migrate/(some number)_create_authors.rb"
-------------------------------------------------------
...
class CreateAuthors < ActiveRecord::Migration[5.0]
  def change
    create_table :authors do |t|
      t.string :first_name, null: false
      t.string :last_name, index: true, null: false

      t.timestamps
    end
  end
end
...
-------------------------------------------------------

-------------------------------------------------------
// In the file "db/migrate/(some number)_create_users.rb"
-------------------------------------------------------
...
class CreateUsers < ActiveRecord::Migration[5.0]
  def change
    create_table :users do |t|
      t.string :first_name, null: false
      t.string :last_name, null: false
      t.string :email, null: false, index: true

      t.timestamps
    end
  end
end
...
-------------------------------------------------------

-------------------------------------------------------
// In the file "db/migrate/(some number)_create_books.rb"
-------------------------------------------------------
...
class CreateBooks < ActiveRecord::Migration[5.0]
  def change
    create_table :books do |t|
      t.references :author, foreign_key: true, null: false
      t.string :title, index: true, null: false

      t.timestamps
    end
  end
end
...
-------------------------------------------------------

-------------------------------------------------------
// In the file "db/migrate/(some number)_create_book_copies.rb"
-------------------------------------------------------
...
class CreateBookCopies < ActiveRecord::Migration[5.0]
  def change
    create_table :book_copies do |t|
      t.references :book, foreign_key: true, null: false
      t.string :isbn, null: false, index: true
      t.date :published, null: false
      t.integer :format, null: false
      t.references :user, foreign_key: true

      t.timestamps
    end
  end
end
...
-------------------------------------------------------

// STEP 6
// Edit config/database.yml
---------------------------------------------------------------
In the file database.yml
---------------------------------------------------------------
default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
development:
  <<: *default
  database: workspace_development
  template: template0
test:
  <<: *default
  database: workspace_development
  template: template0  
---------------------------------------------------------------
// Notice that we just add one more line "template: template0" for 
//    "development:" and "test:"

// STEP 7
// Start up Postgresql server
$ sudo service postgresql start

// STEP 8
// Create a database
$ rake db:create
$ rake db:migrate
// If we want to drop the database, then type "$ rake db:drop"

// STEP 9
-------------------------------------------------------
// In the file "models/author.rb"
-------------------------------------------------------
...
class Author < ApplicationRecord
    has_namy :books
    validates :first_name, :last_name, presence: true
end
...
-------------------------------------------------------

-------------------------------------------------------
// In the file "models/book.rb"
-------------------------------------------------------
...
class Book < ApplicationRecord
  belongs_to :author
  has_many :book_copies
  validates :title, :author, presence: true
end
...
-------------------------------------------------------

-------------------------------------------------------
// In the file "models/book_copy.rb"
-------------------------------------------------------
...
class BookCopy < ApplicationRecord
  belongs_to :book
  belongs_to :user, optional: true
  validates :isbn, :published, :format, :book, presence: true
  HARDBACK = 1
  PAPERBACK = 2
  EBOOK = 3
  
  enum format: { hardback: HARDBACK, paperback: PAPERBACK, ebook: EBOOK }
end
...
-------------------------------------------------------

-------------------------------------------------------
// In the file "models/user.rb"
-------------------------------------------------------
...
class User < ApplicationRecord
    has_many :book_copies
    validates :first_name, :last_name, :email, presence: true
end
...
-------------------------------------------------------

// STEP 10
-------------------------------------------------------
// In the file "config/routes.rb"
-------------------------------------------------------
...
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
  scope module: :v1 do
    resources :authors, only: [:index, :create, :update, :destroy, :show]
    resources :books, only: [:index, :create, :update, :destroy, :show]
    resources :book_copies, only: [:index, :create, :update, :destroy, :show]
    resources :users, only: [:index, :create, :update, :destroy, :show]
  end
end
...
-------------------------------------------------------

// STEP 11
$ rails generate serializer user
$ rails generate serializer book
$ rails generate serializer book_copy
$ rails generate serializer author
-------------------------------------------------------
// In the file "serializers/user_serializer.rb"
-------------------------------------------------------
...
class UserSerializer < ActiveModel::Serializer
  attributes :id, :first_name, :last_name, :email, :book_copies
end
...
-------------------------------------------------------

-------------------------------------------------------
// In the file "serializers/book_serializer.rb"
-------------------------------------------------------
...
class BookSerializer < ActiveModel::Serializer
  attributes :id, :title, :author, :book_copies
  def author
    instance_options[:without_serializer] ? object.author : AuthorSerializer.new(object.author, without_serializer: true)
  end
end
...
-------------------------------------------------------

-------------------------------------------------------
// In the file "serializers/book_copy_serializer.rb"
-------------------------------------------------------
...
class BookCopySerializer < ActiveModel::Serializer
  attributes :id, :book, :user, :isbn, :published, :format
  def book
    instance_options[:without_serializer] ? object.book : BookSerializer.new(object.book, without_serializer: true)
  end
  def user
    return unless object.user
    instance_options[:without_serializer] ? object.user : UserSerializer.new(object.user, without_serializer: true)
  end
end
...
-------------------------------------------------------

-------------------------------------------------------
// In the file "serializers/author_serializer.rb"
-------------------------------------------------------
...
class AuthorSerializer < ActiveModel::Serializer
  attributes :id, :first_name, :last_name, :books
end
...
-------------------------------------------------------

// STEP 12
// In the folder /app/controllers/v1/, manually create the following files
-------------------------------------------------------
// In the file "/app/controllers/v1/authors_controller.rb"
-------------------------------------------------------
...
module V1
  class AuthorsController < ApplicationController
    require 'will_paginate/array'
    before_action :set_author, only: [:show, :destroy, :update]

    def index
      authors = Author.preload(:books).paginate(page: params[:page])
      render json: authors, meta: pagination(authors), adapter: :json
    end

    def show
      render json: @author, adapter: :json
    end

    def create
      author = Author.new(author_params)
      if author.save
        render json: author, adapter: :json, status: 201
      else
        render json: { error: author.errors }, status: 422
      end
    end

    def update
      if @author.update(author_params)
        render json: @author, adapter: :json, status: 200
      else
        render json: { error: @author.errors }, status: 422
      end
    end

    def destroy
      @author.destroy
      head 204
    end

    private

    def set_author
      @author = Author.find(params[:id])
    end

    def author_params
      params.require(:author).permit(:first_name, :last_name)
    end
  end
end
...
-------------------------------------------------------

-------------------------------------------------------
// In the file "/app/controllers/v1/books_controller.rb"
-------------------------------------------------------
...
module V1
  class BooksController < ApplicationController
    require 'will_paginate/array'
    before_action :set_book, only: [:show, :destroy, :update]

    def index
      books = Book.preload(:author, :book_copies).paginate(page: params[:page])
      render json: books, meta: pagination(books), adapter: :json
    end

    def show
      render json: @book, adapter: :json
    end

    def create
      book = Book.new(book_params)
      if book.save
        render json: book, adapter: :json, status: 201
      else
        render json: { error: book.errors }, status: 422
      end
    end

    def update
      if @book.update(book_params)
        render json: @book, adapter: :json, status: 200
      else
        render json: { error: @book.errors }, status: 422
      end
    end

    def destroy
      @book.destroy
      head 204
    end

    private

    def set_book
      @book = Book.find(params[:id])
    end

    def book_params
      params.require(:book).permit(:title, :author_id)
    end
  end
end
...
-------------------------------------------------------
-------------------------------------------------------
// In the file "/app/controllers/v1/users_controller.rb"
-------------------------------------------------------
...
module V1
  class UsersController < ApplicationController
    require 'will_paginate/array'
    before_action :set_user, only: [:show, :destroy, :update]
    

    def index
      users = User.preload(:book_copies).paginate(page: params[:page])
      render json: users, meta: pagination(users), adapter: :json
    end

    def show
      render json: @user, adapter: :json
    end

    def create
      user = User.new(user_params)
      if user.save
        render json: user, adapter: :json, status: 201
      else
        render json: { error: user.errors }, status: 422
      end
    end

    def update
      if @user.update(user_params)
        render json: @user, adapter: :json, status: 200
      else
        render json: { error: @user.errors }, status: 422
      end
    end

    def destroy
      @user.destroy
      head 204
    end

    private

    def set_user
      @user = User.find(params[:id])
    end

    def user_params
      params.require(:user).permit(:first_name, :last_name, :email)
    end
  end
end
...
-------------------------------------------------------
-------------------------------------------------------
// In the file "/app/controllers/v1/book_copies_controller.rb"
-------------------------------------------------------
...
module V1
  class BookCopiesController < ApplicationController
    require 'will_paginate/array'
    before_action :set_book_copy, only: [:show, :destroy, :update]

    def index
      book_copies = BookCopy.preload(:book, :user, book: [:author]).paginate(page: params[:page])
      render json: book_copies, meta: pagination(book_copies), adapter: :json
    end

    def show
      render json: @book_copy, adapter: :json
    end

    def create
      book_copy = BookCopy.new(book_copy_params)
      if book_copy.save
        render json: book_copy, adapter: :json, status: 201
      else
        render json: { error: book_copy.errors }, status: 422
      end
    end

    def update
      if @book_copy.update(book_copy_params)
        render json: @book_copy, adapter: :json, status: 200
      else
        render json: { error: @book_copy.errors }, status: 422
      end
    end

    def destroy
      @book_copy.destroy
      head 204
    end

    private

    def set_book_copy
      @book_copy = BookCopy.find(params[:id])
    end

    def book_copy_params
      params.require(:book_copy).permit(:book_id, :format, :isbn, :published, :user_id)
    end
  end
end
...
-------------------------------------------------------
-------------------------------------------------------
// In the file "/app/controllers/application_controller.rb"
-------------------------------------------------------
...
class ApplicationController < ActionController::API
    
  protected
  def pagination(records)
    {
      pagination: {
        per_page: records.per_page,
        total_pages: records.total_pages,
        total_objects: records.total_entries
      }
    }
  end

end
...
-------------------------------------------------------

// STEP 13
-------------------------------------------------------
// In the file "/db/seeds.rb"
-------------------------------------------------------
...
authors = (1..20).map do
  Author.create!(
    first_name: Faker::Name.first_name,
    last_name: Faker::Name.last_name
  )
end

books = (1..70).map do
  Book.create!(
    title: Faker::Book.title,
    author: authors.sample
  )
end

users = (1..10).map do
  User.create!(
    first_name: Faker::Name.first_name,
    last_name: Faker::Name.last_name,
    email: Faker::Internet.email
  )
end

(1..300).map do
  BookCopy.create!(
    format: rand(1..3),
    published: Faker::Date.between(10.years.ago, Date.today),
    book: books.sample,
    isbn: Faker::Number.number(13)
  )
end
...
-------------------------------------------------------
$ rake db:seed

// STEP 14
// Run server
$ Rails server -p $PORT -b $IP
// Open a new Terminal and see all the routes
$ rake routes
// Run the view
// For example: https://crafting-api-v2-luongnguyen.c9users.io/users

... to be continued ...









