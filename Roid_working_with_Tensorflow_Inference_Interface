(References: 
https://www.tensorflow.org/get_started/mnist/beginners
https://aqibsaeed.github.io/2017-05-02-deploying-tensorflow-model-andorid-device-human-activity-recognition/
https://omid.al/posts/2017-02-20-Tutorial-Build-Your-First-Tensorflow-Android-App.html
)

// STEP 1
// Download the prebuilt libraries (file named 'libtensorflow_inference.so') of Tensorflow for android 
https://ci.tensorflow.org/view/Nightly/job/nightly-android/
// (For example: https://ci.tensorflow.org/view/Nightly/job/nightly-android/100/artifact/)
// Or use the following instruction to build it again
https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/android


// STEP 2
// Create a new project in Android Studio
// Copy and past the file named 'libandroid_tensorflow_inference_java.jar' in the folder called 'app/libs'
// Similarly, copy and past 'libtensorflow_inference.so' into a collection of subfolders 
//      (arm64-v8a, armeabi-v7a, x86, x86_64) of the folder 'app/libs' 
// The structure of 'app/libs' as follows
libs
|-----libandroid_tensorflow_inference_java.jar
|-----arm64-v8a
      |-----libtensorflow_inference.so
|-----armeabi-v7a
      |-----libtensorflow_inference.so
|-----x86
      |-----libtensorflow_inference.so
|-----x86_64
      |-----libtensorflow_inference.so
      
// STEP 3
// Let the project knows where of these library files
//      by adding the following lines to the file called 'app/build.gradle'
--------------------------------------
android {
....
  sourceSets {
          main {
              jniLibs.srcDirs = ['libs']
          }
      }
...
}
--------------------------------------

// STEP 4
// Use Python code editor (for example Spyder of Anaconda) to create a model file of sensor network
---------------------------------------------------------------------
// In some .py file
---------------------------------------------------------------------
import tensorflow as tf

I = tf.placeholder(tf.float32, shape=[None,3], name='I') # input
W = tf.Variable(tf.zeros(shape=[3,2]), dtype=tf.float32, name='W') # weights
b = tf.Variable(tf.zeros(shape=[2]), dtype=tf.float32, name='b') # biases
O = tf.nn.relu(tf.matmul(I, W) + b, name='O') # activation / output

saver = tf.train.Saver()
init_op = tf.global_variables_initializer()

with tf.Session() as session:
	/** 
		------- Model training code goes here ------
	**/
	tf.train.write_graph(session.graph_def, '.', '../har.pbtxt')  
	saver.save(session,save_path = "../har.ckpt")
---------------------------------------------------------------------
// In another .py file
---------------------------------------------------------------------
from tensorflow.python.tools import freeze_graph
from tensorflow.python.tools import optimize_for_inference_lib

freeze_graph.freeze_graph(input_graph = "../har.pbtxt",  input_saver = "",
             input_binary = False, input_checkpoint = "../har.ckpt", output_node_names = "y_",
             restore_op_name = "save/restore_all", filename_tensor_name = "save/Const:0",
             output_graph = "frozen_har.pb", clear_devices = True, initializer_nodes = "")

input_graph_def = tf.GraphDef()
with tf.gfile.Open(output_frozen_graph_name, "r") as f:
    data = f.read()
    input_graph_def.ParseFromString(data)

output_graph_def = optimize_for_inference_lib.optimize_for_inference(
        input_graph_def,
        ["input"], 
        ["y_"],
        tf.float32.as_datatype_enum)

f = tf.gfile.FastGFile("optimized_har.pb", "w")
f.write(output_graph_def.SerializeToString())
---------------------------------------------------------------------
// The output file name of the above python code is 'optimized_har.pb'
// Put this file in the folder called 'app/src/main/assets'
src
|-----main
      |-----assets
            |-----optimized_har.pb


// STEP 5
// Use Java to work with the .so library and the .pb python model 
---------------------------------------------------------------------
// In 'MainActivity.java'
---------------------------------------------------------------------
import org.tensorflow.contrib.android.TensorFlowInferenceInterface;

public class MainActivity extends AppCompatActivity {

private static final String MODEL_FILE = "file:///android_asset/optimized_tfdroid.pb";
    private static final String INPUT_NODE = "I";
    private static final String OUTPUT_NODE = "O";

    private static final int[] INPUT_SIZE = {1,3};

    private TensorFlowInferenceInterface inferenceInterface;

    static {
        System.loadLibrary("tensorflow_inference");
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
    ...
    inferenceInterface = new TensorFlowInferenceInterface();
    inferenceInterface.initializeTensorFlow(getAssets(), MODEL_FILE);
    ...
    float[] inputFloats = {num1, num2, num3};
    inferenceInterface.fillNodeFloat(INPUT_NODE, INPUT_SIZE, inputFloats);
    inferenceInterface.runInference(new String[] {OUTPUT_NODE});

    float[] result = {0, 0};
    inferenceInterface.readNodeFloat(OUTPUT_NODE, result);
    ...
    }
...
}    
---------------------------------------------------------------------


(To be continue ...)
